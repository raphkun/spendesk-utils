{"version":3,"sources":["jsvat.js"],"names":["jsvat","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","vatNum","COUNTRIES","calcs","_validate","result","_getPureVAT","toString","toUpperCase","replace","_isCountryBlocked","config","length","indexOf","checkValidity","regexArr","rules","i","isValid","exports","checkVAT","value","country","hasOwnProperty","austria","temp","total","charAt","this","multipliers","Math","floor","slice","belgium","check","bulgaria","_increase","from","to","incr","_increase2","_checkNineLengthVat","expect","_isPhysicalPerson","month","physical","substr","_isForeigner","foreigner","_miscellaneousVAT","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","_isLegalEntities","additional","_isIndividualType2","j","lookup","_isIndividualType3","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithunia","_extractDigit","multiplier","key","_doubleCheckCalculation","short","extractDigit","_check9DigitVat","extractDigit12","k","med","_doubleCheckCalculation12","l","alt","_check12DigitVat","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","_check10DigitINN","m_1","_check12DigitINN","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function() {\n\n  'use strict';\n\n  var COUNTRIES = {}\n\n  function _validateRegex(vat, regex) {\n    return regex.test(vat)\n  }\n\n  function _validateRules(vat, regex, countryName) {\n    var parsedNum = regex.exec(vat)\n    var vatNum = parsedNum[2]\n\n    return COUNTRIES[countryName].calcs(vatNum)\n  }\n\n  function _validate(vat, regex, countryName) {\n    var result = false\n    if (_validateRegex(vat, regex)) {\n      result = _validateRules(vat, regex, countryName)\n    }\n    return result\n  }\n\n  function _getPureVAT(vat) {\n    vat = vat || ''\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n  }\n\n  function _isCountryBlocked(config, countryName) {\n    if (!config || config.length === 0) return false\n\n    return config.indexOf(countryName) === -1\n  }\n\n  function checkValidity(vat, countryName) {\n    var regexArr = COUNTRIES[countryName].rules.regex\n    for (var i = 0; i < regexArr.length; i++) {\n      var isValid = _validate(vat, regexArr[i], countryName)\n      if (isValid) return isValid && !_isCountryBlocked(exports.config, countryName)\n    }\n    return false\n  }\n\n  var exports = {\n    config: [],\n    checkVAT: function(vat) {\n      var result = {\n        value: _getPureVAT(vat),\n        isValid: false,\n        country: null\n      }\n\n      if (!vat) return result\n\n      for (var countryName in COUNTRIES) {\n        if (COUNTRIES.hasOwnProperty(countryName)) {\n          result.isValid = checkValidity(result.value, countryName)\n\n          if (result.isValid) {\n            result.country = countryName\n            return result\n          }\n        }\n      }\n\n      return result\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.austria = {\n    calcs: function(vat) {\n      var total = 0\n      var temp\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i]\n\n        if (temp > 9) {\n          total += Math.floor(temp / 10) + temp % 10\n        } else {\n          total += temp\n        }\n      }\n\n      total = 10 - (total + 4) % 10\n      if (total === 10) total = 0\n\n      return total === +vat.slice(7, 8)\n    },\n    rules: {\n      multipliers: [\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1\n      ],\n      regex: [/^(AT)U(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.belgium = {\n    calcs: function(vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat\n      }\n\n      if (+vat.slice(1, 2) === 0) return false\n\n      var check = (97 - +vat.slice(0, 8) % 97)\n      return check === +vat.slice(8, 10)\n    },\n    rules: {\n      regex: [/^(BE)(0?\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.bulgaria = (function() {\n    function _increase(value, vat, from, to, incr) {\n      for (var i = from; i < to; i++) {\n        value += +vat.charAt(i) * (i + incr)\n      }\n      return value\n    }\n\n    function _increase2(value, vat, from, to, multipliers) {\n      for (var i = from; i < to; i++) {\n        value += +vat.charAt(i) * multipliers[i]\n      }\n      return value\n    }\n\n    function _checkNineLengthVat(vat) {\n      var total\n      var temp = 0\n      var expect = +vat.slice(8)\n\n      temp = _increase(temp, vat, 0, 8, 1)\n\n      total = temp % 11\n      if (total !== 10) {\n        return total === expect\n      }\n\n      temp = _increase(0, vat, 0, 8, 3)\n\n      total = temp % 11\n      if (total === 10) total = 0\n\n      return total === expect\n    }\n\n    function _isPhysicalPerson(vat, rules) {\n      // 10 digit VAT code - see if it relates to a standard physical person\n      if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n        // Check month\n        var month = +vat.slice(2, 4)\n        if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n          var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n          // Establish check digit.\n          total = total % 11\n          if (total === 10) total = 0\n          // Check to see if the check digit given is correct, If not, try next type of person\n          if (total === +vat.substr(9, 1)) return true\n        }\n      }\n\n      return false\n    }\n\n    function _isForeigner(vat, rules) {\n      // Extract the next digit and multiply by the counter.\n      var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n      // Check to see if the check digit given is correct, If not, try next type of person\n      if (total % 10 === +vat.substr(9, 1)) {\n        return true\n      }\n    }\n\n    function _miscellaneousVAT(vat, rules) {\n      // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n      var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(9, 1)\n      return total === expect\n    }\n\n    return {\n      calcs: function(vat) {\n        if (vat.length === 9) {\n          return _checkNineLengthVat(vat)\n        } else {\n          return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n        }\n      },\n      rules: {\n        multipliers: {\n          physical: [\n            2,\n            4,\n            8,\n            5,\n            10,\n            9,\n            7,\n            3,\n            6\n          ],\n          foreigner: [\n            21,\n            19,\n            17,\n            13,\n            11,\n            9,\n            7,\n            3,\n            1\n          ],\n          miscellaneous: [\n            4,\n            3,\n            2,\n            7,\n            6,\n            5,\n            4,\n            3,\n            2\n          ]\n        },\n        regex: [/^(BG)(\\d{9,10})$/]\n      }\n    }\n  })()\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.croatia = {\n    calcs: function(vat) {\n      var expect\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10\n      var sum = 0\n\n      for (var i = 0; i < 10; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11)\n      return (product + expect) % 10 === 1\n    },\n    rules: {\n      regex: [/^(HR)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.cyprus = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i)\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1\n              break\n            case 1:\n              temp = 0\n              break\n            case 2:\n              temp = 5\n              break\n            case 3:\n              temp = 7\n              break\n            case 4:\n              temp = 9\n              break\n            default:\n              temp = temp * 2 + 3\n          }\n        }\n        total += temp\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26\n      total = String.fromCharCode(total + 65)\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.czech_republic = (function() {\n    function _isLegalEntities(vat, rules) {\n      var total = 0\n\n      if (rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * rules.multipliers[i]\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) total = 0\n        if (total === 11) total = 1\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(7, 8)\n        return total === expect\n      }\n\n      return false\n    }\n\n    function _isIndividualType2(vat, rules) {\n      var total = 0\n\n      if (rules.additional[2].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (var j = 0; j < 7; j++) {\n          total += +vat.charAt(j + 1) * rules.multipliers[j]\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) total = 0\n        if (total === 11) total = 1\n\n        // Convert calculated check digit according to a lookup table\n        var expect = +vat.slice(8, 9)\n        return rules.lookup[total - 1] === expect\n      }\n\n      return false\n    }\n\n    function _isIndividualType3(vat, rules) {\n      if (rules.additional[3].test(vat)) {\n        var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n        var expect = +vat % 11 === 0\n        return !!(temp % 11 === 0 && expect)\n      }\n\n      return false\n    }\n\n    return {\n      calcs: function(vat) {\n        if (_isLegalEntities(vat, this.rules)) return true\n        if (_isIndividualType2(vat, this.rules)) return true\n        if (_isIndividualType3(vat, this.rules)) return true\n\n        return false\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        lookup: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2,\n          1,\n          0,\n          9,\n          10\n        ],\n        regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n        additional: [\n          /^\\d{8}$/,\n          /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n          /^6\\d{8}$/,\n          /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n        ]\n      }\n    }\n  }())\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.denmark = {\n    calcs: function(vat) {\n      var total = 0\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      return total % 11 === 0\n    },\n    rules: {\n      multipliers: [\n        2,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2,\n        1\n      ],\n      regex: [/^(DK)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.estonia = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        3,\n        7,\n        1,\n        3,\n        7,\n        1,\n        3,\n        7\n      ],\n      regex: [/^(EE)(10\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.europe = {\n    calcs: function() {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true\n    },\n    rules: {\n      regex: [/^(EU)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.finland = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        7,\n        9,\n        10,\n        5,\n        8,\n        4,\n        2\n      ],\n      regex: [/^(FI)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.france = {\n    calcs: function(vat) {\n      var total\n      var expect\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2)\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2)\n      return total === expect\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.germany = {\n    calcs: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10\n      var sum = 0\n      var checkDigit = 0\n      var expect\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0\n      } else {\n        checkDigit = 11 - product\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.greece = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: [/^(EL)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.hungary = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: [/^(HU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.ireland = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72\n        } else {\n          total += 9\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23\n      if (total === 0) {\n        total = 'W'\n      } else {\n        total = String.fromCharCode(total + 64)\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      typeFormats: {\n        first: /^\\d[A-Z*+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.italy = {\n    calcs: function(vat) {\n      var total = 0\n      var temp\n      var expect\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false\n      }\n\n      temp = +vat.slice(7, 10)\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2\n      ],\n      regex: [/^(IT)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.latvia = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n      } else {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i]\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [\n        9,\n        1,\n        4,\n        8,\n        3,\n        10,\n        2,\n        5,\n        7,\n        6\n      ],\n      regex: [/^(LV)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.lithunia = (function() {\n    function _extractDigit(vat, multiplier, key) {\n      return +vat.charAt(key) * multiplier[key]\n    }\n\n    function _doubleCheckCalculation(vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0\n        for (var i = 0; i < 8; i++) {\n          total += _extractDigit(vat, rules.multipliers.short, i)\n        }\n      }\n\n      return total\n    }\n\n    function extractDigit(vat, total) {\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * (i + 1)\n      }\n      return total\n    }\n\n    function checkDigit(total) {\n      total = total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      return total\n    }\n\n    function _check9DigitVat(vat, rules) {\n      // 9 character VAT numbers are for legal persons\n      var total = 0\n      if (vat.length === 9) {\n        // 8th character must be one\n        if (!(/^\\d{7}1/).test(vat)) return false\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit(vat, total)\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation(vat, total, rules)\n\n        // Establish check digit.\n        total = checkDigit(total)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(8, 9)\n        return total === expect\n      }\n      return false\n    }\n\n    function extractDigit12(vat, total, rules) {\n      for (var k = 0; k < 11; k++) {\n        total += _extractDigit(vat, rules.multipliers.med, k)\n      }\n      return total\n    }\n\n    function _doubleCheckCalculation12(vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0\n        for (var l = 0; l < 11; l++) {\n          total += _extractDigit(vat, rules.multipliers.alt, l)\n        }\n      }\n\n      return total\n    }\n\n    function _check12DigitVat(vat, rules) {\n      var total = 0\n\n      // 12 character VAT numbers are for temporarily registered taxpayers\n      if (vat.length === 12) {\n        // 11th character must be one\n        if (!(rules.check).test(vat)) return false\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit12(vat, total, rules)\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation12(vat, total, rules)\n\n        // Establish check digit.\n        total = checkDigit(total)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(11, 12)\n        return total === expect\n      }\n\n      return false\n    }\n\n    return {\n      calcs: function(vat) {\n        return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n      },\n      rules: {\n        multipliers: {\n          short: [\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            1\n          ],\n          med: [\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            1,\n            2\n          ],\n          alt: [\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            1,\n            2,\n            3,\n            4\n          ]\n        },\n        check: /^\\d{10}1/,\n        regex: [/^(LT)(\\d{9}|\\d{12})$/]\n      }\n    }\n  }())\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.luxembourg = {\n    calcs: function(vat) {\n      var expect = +vat.slice(6, 8)\n      var checkDigit = +vat.slice(0, 6) % 89\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(LU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.malta = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        3,\n        4,\n        6,\n        7,\n        8,\n        9\n      ],\n      regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.netherlands = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.norway = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11\n\n      if (total === 11) {\n        total = 0\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [\n        3,\n        2,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [/^(NO)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.poland = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        6,\n        5,\n        7,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n      ],\n      regex: [/^(PL)(\\d{10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.portugal = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [/^(PT)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.romania = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length\n      var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        7,\n        5,\n        3,\n        2,\n        1,\n        7,\n        5,\n        3,\n        2\n      ],\n      regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.russia = (function() {\n    function _check10DigitINN(vat, rules) {\n      var total = 0\n\n      if (vat.length === 10) {\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * rules.multipliers.m_1[i]\n        }\n\n        total = total % 11\n        if (total > 9) {\n          total = total % 10\n        }\n\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        var expect = +vat.slice(9, 10)\n        return total === expect\n      }\n\n      return false\n    }\n\n    function _check12DigitINN(vat, rules) {\n      var total1 = 0\n      var total2 = 0\n\n      if (vat.length === 12) {\n        for (var j = 0; j < 11; j++) {\n          total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n        }\n\n        total1 = total1 % 11\n\n        if (total1 > 9) {\n          total1 = total1 % 10\n        }\n\n        for (var k = 0; k < 11; k++) {\n          total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n        }\n\n        total2 = total2 % 11\n        if (total2 > 9) {\n          total2 = total2 % 10\n        }\n\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        var expect = (total1 === +vat.slice(10, 11))\n        var expect2 = (total2 === +vat.slice(11, 12))\n        return (expect) && (expect2)\n      }\n\n      return false\n    }\n\n    return {\n      calcs: function(vat) {\n        // See http://russianpartner.biz/test_inn.html for algorithm\n        return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n      },\n      rules: {\n        multipliers: {\n          m_1: [\n            2,\n            4,\n            10,\n            3,\n            5,\n            9,\n            4,\n            6,\n            8,\n            0\n          ],\n          m_2: [\n            7,\n            2,\n            4,\n            10,\n            3,\n            5,\n            9,\n            4,\n            6,\n            8,\n            0\n          ],\n          m_3: [\n            3,\n            7,\n            2,\n            4,\n            10,\n            3,\n            5,\n            9,\n            4,\n            6,\n            8,\n            0\n          ]\n        },\n        regex: [/^(RU)(\\d{10}|\\d{12})$/]\n      }\n    }\n  }())\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.serbia = {\n    calcs: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10\n      var sum = 0\n      var checkDigit\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1\n      checkDigit = (product + (+vat.slice(8, 9))) % 10\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(RS)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.slovakia_republic = {\n    calcs: function(vat) {\n      var expect = 0\n      var checkDigit = (vat % 11)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.slovenia = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8)\n      return !!(total !== 11 && total === expect)\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.spain = {\n    calcs: function(vat) {\n      var i = 0\n      var total = 0\n      var temp\n      var expect\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        if (total === 10) {\n          total = 0\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        total = String.fromCharCode(total + 64)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n        return tempnumber.charAt(8) === expect\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n        return vat.charAt(8) === expect\n      } else return false\n    },\n    rules: {\n      multipliers: [\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2\n      ],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.sweden = {\n    calcs: function(vat) {\n      var expect\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0\n      var digit\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i)\n        R += Math.floor(digit / 5) + ((digit * 2) % 10)\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j)\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SE)(\\d{10}01)$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.switzerland = {\n    calcs: function(vat) {\n      var total = 0\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        5,\n        4,\n        3,\n        2,\n        7,\n        6,\n        5,\n        4\n      ],\n      regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.united_kingdom = {\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500\n        return vat.substr(2, 3) < expect\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499\n        return vat.substr(2, 3) > expect\n      }\n\n      // Standard and commercial numbers\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7)\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit)\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55\n      else\n        checkDigit = checkDigit + 42\n      expect = +vat.slice(7, 9)\n      return !!(checkDigit === expect && no > 1000000)\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  }\n\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports;\n\n  return exports;\n\n})();"]}